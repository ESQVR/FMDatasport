var search_data = {"index":{"searchIndex":["carinfo","fmdoparser","fmdatasport","sampleplayer","samplerecorder","trackinfo","car_lookup()","convert_class()","convert_drive()","extract_static_values()","hash_udp_stream()","load_and_merge_list()","load_and_merge_tracks()","new()","new()","new()","parse_dashdata()","play()","start()","track_lookup()","license","readme"],"longSearchIndex":["carinfo","fmdoparser","fmdatasport","sampleplayer","samplerecorder","trackinfo","carinfo#car_lookup()","carinfo#convert_class()","carinfo#convert_drive()","fmdoparser#extract_static_values()","fmdoparser#hash_udp_stream()","carinfo::load_and_merge_list()","trackinfo::load_and_merge_tracks()","fmdatasport::new()","sampleplayer::new()","samplerecorder::new()","fmdoparser#parse_dashdata()","sampleplayer#play()","samplerecorder#start()","trackinfo#track_lookup()","",""],"info":[["CarInfo","","CarInfo.html","","<p>CarInfo\n<p>CarInfo offers methods to convert static integer values from FMDOParser into readable strings. …\n"],["FMDOParser","","FMDOParser.html","","<p>Offers methods for unpacking FM Data Out UDP datagrams and hashing the resulting values.\n<p>Official Output …\n"],["FMDatasport","","FMDatasport.html","","<p>Instantiating an FMDatasport object initializes a UDP socket listener in a separate thread which waits(blocks) …\n"],["SamplePlayer","","SamplePlayer.html","","<p>SamplePlayer reads telemetry stream data from an external file (use SampleRecorder to create a new file) …\n"],["SampleRecorder","","SampleRecorder.html","","<p>SampleRecorder records the Forza Data Out UDP stream data to a file. It listens on a specified port, …\n"],["TrackInfo","","TrackInfo.html","","<p>Module: TrackInfo\n<p>TrackInfo reads track information data from an external file and makes this available …\n"],["car_lookup","CarInfo","CarInfo.html#method-i-car_lookup","(ordinal)","<p>Retrieves car details from CAR_LIST by Ordinal.\n<p>@param ordinal [Integer] The ID of the car to look up. …\n"],["convert_class","CarInfo","CarInfo.html#method-i-convert_class","(num)","<p>Converts :car_class integer into readable class letters for display\n<p>convert_class(3)  =&gt; ‘B’ …\n"],["convert_drive","CarInfo","CarInfo.html#method-i-convert_drive","(num)","<p>Converts drivetrain-type integers into readable drivetrain labels for display\n"],["extract_static_values","FMDOParser","FMDOParser.html#method-i-extract_static_values","(data)","<p>Returns hash of static values (Car/Track Info) with descriptive “string” keys FMDatasport conditionally …\n"],["hash_udp_stream","FMDOParser","FMDOParser.html#method-i-hash_udp_stream","(data)","<p>Returns hash of converted values with “official” :symbol keys\n<p>Some values from the official …\n\n"],["load_and_merge_list","CarInfo","CarInfo.html#method-c-load_and_merge_list","(file_path)","<p>Load (and merge) from car_list.json external file into CAR_LIST.\n"],["load_and_merge_tracks","TrackInfo","TrackInfo.html#method-c-load_and_merge_tracks","(file_path)",""],["new","FMDatasport","FMDatasport.html#method-c-new","(ip_addr, port)","<p>When calling FMDatasport.new provide the same IP/Port as specified in your Forza Motorsport’s Data …\n"],["new","SamplePlayer","SamplePlayer.html#method-c-new","(file_path, destination_ip = '127.0.0.1', destination_port = '9876', loop_count = 1)","<p>file_path &mdash; relative path to recorded UDP stream file\n<p>destination_ip &mdash; IP to send UDP stream\n<p>destination_port … &mdash; "],["new","SampleRecorder","SampleRecorder.html#method-c-new","(listen_port, file_path, recording_length)","<p>Creates a new SampleRecorder instance.\n<p>@param listen_port [Integer] The port to listen on for UDP data. …\n"],["parse_dashdata","FMDOParser","FMDOParser.html#method-i-parse_dashdata","(data, offset, size, format)","<p>Returns unpacked values from UDP datagrams\n<p>data &mdash; this must be a 331-byte Forza Motorsport Data Out datagram …\n"],["play","SamplePlayer","SamplePlayer.html#method-i-play","()","<p>Spawns a new Thread to simulate FM Data Out UDP data stream\n<p>Reads 331 bytes at a time from recorded binary …\n"],["start","SampleRecorder","SampleRecorder.html#method-i-start","()","<p>Starts the recording process.\n<p>This method binds to the specified port, listens for incoming UDP data, …\n"],["track_lookup","TrackInfo","TrackInfo.html#method-i-track_lookup","(ordinal)",""],["LICENSE","","LICENSE_txt.html","","<p>MIT License\n<p>Copyright © 2024 ESQVR\n<p>Permission is hereby granted, free of charge, to any person obtaining …\n"],["README","","README_md.html","","<p>FMDatasport\n<p>FMDatasport is a Ruby gem for receiving and parsing data from the Forza Motorsport Data Out …\n"]]}}